---
interface FaqItem {
  question: string;
  answer: string;
}

interface Props {
  title: string;
  items: FaqItem[];
  background?: string;
  id?: string;
  sectionPadding?: string;
}

const { title, items, background = "bg-white", id, sectionPadding = "py-16" } = Astro.props;
---

<section id={id || 'faq'} class={`${background} ${sectionPadding}`}>
  <div class="container mx-auto px-4">
    <h2 class="text-3xl md:text-3xl lg:text-4xl font-bold text-center mb-12 md:mb-16">{title}</h2>
    
    <div class="max-w-3xl mx-auto">
      {items.map((item, index) => (
        <div class="faq-item border-b border-gray-200">
          <button
            class="faq-question w-full text-left py-6 flex justify-between items-center focus:outline-none"
            aria-expanded="false"
            aria-controls={`faq-answer-${index}`}
          >
            <span class="text-lg md:text-xl font-medium">{item.question}</span>
            <span class="faq-icon ml-4">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="transform transition-transform duration-300">
                <line x1="12" y1="5" x2="12" y2="19"></line>
                <line x1="5" y1="12" x2="19" y2="12"></line>
              </svg>
            </span>
          </button>
          <div
            id={`faq-answer-${index}`}
            class="faq-answer overflow-hidden max-h-0 transition-all duration-300"
          >
            <div class="py-4 pb-6">
              <p class="text-gray-600" set:html={item.answer}></p>
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const faqItems = document.querySelectorAll('.faq-item');
    
    faqItems.forEach((item: Element) => {
      const question = item.querySelector('.faq-question') as HTMLElement;
      const answer = item.querySelector('.faq-answer') as HTMLElement;
      const icon = item.querySelector('.faq-icon svg') as SVGElement;
      
      if (!question || !answer || !icon) return;
      
      question.addEventListener('click', () => {
        // Check if this FAQ is currently open
        const isOpen = question.getAttribute('aria-expanded') === 'true';
        
        // Close all FAQs
        faqItems.forEach((otherItem: Element) => {
          const otherQuestion = otherItem.querySelector('.faq-question') as HTMLElement;
          const otherAnswer = otherItem.querySelector('.faq-answer') as HTMLElement;
          const otherIcon = otherItem.querySelector('.faq-icon svg') as SVGElement;
          
          if (otherQuestion && otherAnswer && otherIcon) {
            otherQuestion.setAttribute('aria-expanded', 'false');
            (otherAnswer as HTMLElement).style.maxHeight = '0px';
            otherIcon.classList.remove('rotate-45');
          }
        });
        
        // If the clicked FAQ was closed, open it
        if (!isOpen) {
          question.setAttribute('aria-expanded', 'true');
          (answer as HTMLElement).style.maxHeight = `${(answer as HTMLElement).scrollHeight}px`;
          icon.classList.add('rotate-45');
        }
      });
    });
  });
</script>
