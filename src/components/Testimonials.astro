---
import TestimonialCard from './TestimonialCard.astro'

interface Testimonial {
  name: string
  role?: string
  content: string
  mediaType?: 'image' | 'youtube' | 'vimeo' | 'none'
  mediaUrl?: string
  mediaSize?: 'xs' | 'sm' | 'md' | 'lg' | 'xl'
}

interface Props {
  // Título da seção
  sectionTitle?: string
  sectionSubtitle?: string

  // Depoimentos
  testimonials: Testimonial[]

  // Cores e estilos (opcionais com valores padrão)
  bgColor?: string
  sectionPadding?: string
  containerMaxWidth?: string

  // Estilos do título
  titleClass?: string
  titleColor?: string
  subtitleClass?: string
  subtitleColor?: string

  // Layout
  columns?: 1 | 2 | 3
  cardBackground?: string
}

const {
  // Título da seção
  sectionTitle = 'Depoimentos',
  sectionSubtitle = 'O que nossos alunos estão dizendo',

  // Depoimentos
  testimonials = [],

  // Cores e estilos da seção
  bgColor = 'bg-gray-50',
  sectionPadding = 'py-24',
  containerMaxWidth = 'max-w-6xl',

  // Estilos do título
  titleClass = 'text-3xl md:text-3xl lg:text-4xl font-bold mb-4',
  titleColor = 'text-primary',
  subtitleClass = 'text-xl mb-12',
  subtitleColor = 'text-secondary/80',

  // Layout
  columns = 2,
  cardBackground = 'bg-white',
} = Astro.props

// Definir classes de grid com base no número de colunas
const gridClasses = {
  1: 'grid-cols-1',
  2: 'grid-cols-1 md:grid-cols-2',
  3: 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3',
}
---

<section
  class={`${sectionPadding} ${bgColor} relative isolate overflow-hidden`}
>
  <!-- Fundo estilizado para a seção inteira -->
  <div
    class="absolute inset-0 -z-10 bg-[radial-gradient(45rem_50rem_at_top,#F4E2DE,white)] opacity-20"
  >
  </div>

  <div class={`container mx-auto px-4 ${containerMaxWidth}`}>
    <!-- Cabeçalho da seção -->
    <div class="text-center mb-16">
      <h2 class={`${titleClass} ${titleColor}`}>{sectionTitle}</h2>
      {
        sectionSubtitle && (
          <p class={`${subtitleClass} ${subtitleColor}`}>{sectionSubtitle}</p>
        )
      }
    </div>

    <!-- Slider -->
    <div
      id="testimonial-slider"
      class="relative overflow-hidden carousel"
      data-testimonials-length={testimonials.length}
    >
      <!-- Container do carrossel -->
      <div
        id="testimonial-cards-container"
        class="flex transition-transform duration-500 carousel-cards"
      >
        <!-- Cards do carrossel -->
        {
          testimonials.map((testimonial, idx) => (
            <div class="testimonial-slider-card w-full md:w-1/2 lg:w-1/3 flex-shrink-0 px-4 transition-transform duration-300 hover:scale-105">
              <TestimonialCard
                name={testimonial.name}
                role={testimonial.role}
                content={testimonial.content}
                mediaType={testimonial.mediaType}
                mediaUrl={testimonial.mediaUrl}
                mediaSize={testimonial.mediaSize}
                background={cardBackground}
              />
            </div>
          ))
        }
      </div>
      <div class="flex items-center justify-center gap-4 mt-6">
        <button
          type="button"
          class="rounded-full border border-gray-300 p-2 hover:bg-gray-200 transition carousel-prev"
          aria-label="Anterior"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="2"
            stroke="currentColor"
            class="w-5 h-5"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M15.75 19.5L8.25 12l7.5-7.5"></path>
          </svg>
        </button>
        <div id="testimonial-dots-container" class="flex gap-2">
          {/* Os dots serão gerados dinamicamente pelo JavaScript */}
        </div>
        <button
          type="button"
          class="rounded-full border border-gray-300 p-2 hover:bg-gray-200 transition carousel-next"
          aria-label="Próximo"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="2"
            stroke="currentColor"
            class="w-5 h-5"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M8.25 4.5l7.5 7.5-7.5 7.5"></path>
          </svg>
        </button>
      </div>
    </div>
    <script>
      import { initCarousel } from '../scripts/carousel.js';

      document.addEventListener('DOMContentLoaded', () => {
        // Inicializar o carrossel de depoimentos com configurações específicas
        initCarousel({
          carouselSelector: '#testimonial-slider',
          cardSelector: '.testimonial-slider-card',
          cardsContainerSelector: '#testimonial-cards-container',
          dotsContainerSelector: '#testimonial-dots-container',
          prevButtonSelector: 'button[aria-label="Anterior"]',
          nextButtonSelector: 'button[aria-label="Próximo"]',
          defaultGroupSize: 3,
          autoplay: true,
          autoplayDelay: 4000, // 4 segundos entre transições
          dotActiveClass: 'bg-primary',
          dotInactiveClass: 'bg-gray-300',
          cardWidthClasses: {
            mobile: 'w-full',
            tablet: 'md:w-1/2',
            desktop: 'lg:w-1/3'
          }
        });
      });
    </script>
  </div>
</section>
